<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2012 Ericsson AB.
  All rights reserved

  DX ECIM Tool-chain generated this file on Sep 17, 2012 2:39:08 PM using
    * ecim.m2m (2.3.1.201206201134)
    * ecim.m2t (2.3.1.201206201134)
    * ecim.dsl (2.3.1.201206201134)
    * ecim.edm (2.3.1.201206201134)
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
    <dtdVersion>E</dtdVersion>
    <momMetaData>
        <momTitle>title</momTitle>
        <momSubTitle>sub title</momSubTitle>
        <momIdentity>
            <docNum>0</docNum>
            <docLang>English</docLang>
            <docRev>0</docRev>
            <docDate>date</docDate>
        </momIdentity>
    </momMetaData>
    <mim name="commonTypes_mim" organization="" release="0" version="1">
        <description>&lt;br /&gt;</description>
        <derivedDataType name="DN">
            <description>DN</description>
            <baseType>
                <string>
                    <lengthRange>
                        <max>65535</max>
                        <min>0</min>
                    </lengthRange>
                    <validValues>((((([A-Za-z][A-Za-z0-9\-]+)|([0-9]+(\.[0-9]+)*))\s*=\s*([^+,=#;]|\\\+|\\,|\\=|#[0-9a-fA-F]{2}|\\;)+)((\s*\+\s*((([A-Za-z][A-Za-z0-9\-]+)|([0-9]+(\.[0-9]+)*))\s*=\s*([^+,=#;]|\\\+|\\,|\\=|#[0-9a-fA-F]{2}|\\;)+))*))((\s*(,|;)\s*(((([A-Za-z][A-Za-z0-9\-]+)|([0-9]+(\.[0-9]+)*))\s*=\s*([^+,=#;]|\\\+|\\,|\\=|#[0-9a-fA-F]{2}|\\;)+)((\s*\+\s*((([A-Za-z][A-Za-z0-9\-]+)|([0-9]+(\.[0-9]+)*))\s*=\s*([^+,=#;]|\\\+|\\,|\\=|#[0-9a-fA-F]{2}|\\;)+))*)))*))?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="KeyValue">
            <baseType>
                <string>
                    <lengthRange>
                        <max>1023</max>
                        <min>1</min>
                    </lengthRange>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="ObjectIdentifier">
            <description>The object-identifier type represents administratively
            assigned names in a registration-hierarchical-name tree.

            Values of this type are denoted as a sequence of numerical
            non-negative sub-identifier values. Each sub-identifier
            value MUST NOT exceed 2^32-1 (4294967295). Sub-identifiers
            are separated by single dots and without any intermediate
            white space.

            Although, the number of sub-identifiers is not limited,
            module designers should realize that there may be
            implementations that stick with the SMIv2 limit of 128
            sub-identifiers.

            This type is a superset of the SMIv2 OBJECT IDENTIFIER type
            since it is not restricted to 128 sub-identifiers.";

            Reference:
            - ISO/IEC 9834-1: Information technology -- Open Systems
                    Interconnection -- Procedures for the operation of OSI
                    Registration Authorities: General procedures and top
                    arcs of the ASN.1 Object Identifier tree</description>
            <baseType>
                <string>
                    <validValues>([0-9]+(\.[0-9]+)*)?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="int8">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 8-bit-long signed integer (signed octet).</description>
            <baseType>
                <int8>
                    <range>
                        <max>127</max>
                        <min>-128</min>
                    </range>
                </int8>
            </baseType>
        </derivedDataType>
        <derivedDataType name="uint8">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 8-bit-long unsigned integer (unsigned octet).</description>
            <baseType>
                <uint8>
                    <range>
                        <max>255</max>
                        <min>0</min>
                    </range>
                </uint8>
            </baseType>
        </derivedDataType>
        <derivedDataType name="int16">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 16-bit-long signed integer (signed word). </description>
            <baseType>
                <int16>
                    <range>
                        <max>32767</max>
                        <min>-32768</min>
                    </range>
                </int16>
            </baseType>
        </derivedDataType>
        <derivedDataType name="uint16">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 16-bit-long unsigned integer (unsigned word).</description>
            <baseType>
                <uint16>
                    <range>
                        <max>65535</max>
                        <min>0</min>
                    </range>
                </uint16>
            </baseType>
        </derivedDataType>
        <derivedDataType name="int32">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 32-bit-long signed integer (signed longword).</description>
            <baseType>
                <int32>
                    <range>
                        <max>2147483647</max>
                        <min>-2147483648</min>
                    </range>
                </int32>
            </baseType>
        </derivedDataType>
        <derivedDataType name="uint32">
            <description>    * * * * * * * * * * * * * * * * * *
    * Common integer based data types *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    * These types are integer types with range prohibitions
    * based on the common integral data types from Java and C++.
    * Their defaultValue, as for all integer, is zero.
    *

This is an 32-bit-long unsigned integer (unsigned longword).</description>
            <baseType>
                <uint32>
                    <range>
                        <max>4294967295</max>
                        <min>0</min>
                    </range>
                </uint32>
            </baseType>
        </derivedDataType>
        <derivedDataType name="tspTime">
            <description>This type represents a timestamp containing only hours,
            minutes and secunds in the following format: hh:mm[:ss[.xxx]].
            The hour can be more than 24 hours, so the merge of tspTime with
            tspDate to tspDateTime is not always simple. The length of the
            datas can be sortened, if needed. (leading zeros are not mandatory)</description>
            <baseType>
                <string>
                    <validValues>[0-9]+:[0-5]?[0-9](:[0-5]?[0-9](\.[0-9]+)?)?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="tspDate">
            <description>This type represents a timestamp containing only years, months and days in the following format: yyyy-mm-dd. The length of the datas can be sorter, if needed. (leading zeros are not mandatory).</description>
            <baseType>
                <string>
                    <validValues>[0-9]{1,4}-(1[0-2]|0?[0-9])-(3[0-1]|[0-2]?[0-9])</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="tspDateTime">
            <description>This type represents a timestamp containing date and time also in the following format: yyyy-mm-ddThh:mm[:ss[.xxx]].
The length of the datas can be sorter, if needed. (leading zeros are not mandatory)</description>
            <baseType>
                <string>
                    <validValues>[0-9]{1,4}-(1[0-2]|0?[0-9])-(3[0-1]|[0-2]?[0-9])T(2[0-3]|[0-1]?[0-9]):[0-5]?[0-9](:[0-5]?[0-9](\.[0-9]+)?)?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="integer">
            <description>64 bit long long</description>
            <baseType>
                <int64>
                    <range>
                        <max>9223372036854775807</max>
                        <min>-9223372036854775808</min>
                    </range>
                </int64>
            </baseType>
        </derivedDataType>
        <derivedDataType name="integerKeyString">
            <description>The name indicates that this is an integer key type</description>
            <baseType>
                <string>
                    <validValues>(\+|-)?[0-9]+</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="Ip4Address">
            <description>The Ip4Address type represents an IPv4 address in dotted-quad notation. The IPv4 address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address  values.  For link-local addresses, the zone index will typically be the interface index number or the name of an interface. If the zone index is not present, the default zone of the device will be used.

&lt;defaultValue&gt;0.0.0.0&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}(%[\p{N}\p{L}]+)?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="Ip4Prefix">
            <description>The Ip4Prefix type represents an IPv4 address prefix.
The prefix length is given by the number following the slash character and must be less than or equal to 32.

A prefix length value of n corresponds to an IP address mask which has n contiguous 1-bits from the most significant bit (MSB) and all other bits set to 0.

The IPv4 address represented in dotted quad notation should have all bits that do not belong to the prefix  set to zero.

&lt;defaultValue&gt;0.0.0.0/0&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])/(3[0-2]|[0-2]?[0-9])</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="Ip6Address">
            <description>The Ip6Address type represents an IPv6 address in full, mixed, shortened and shortened mixed notation.  The IPv6 address may include a zone index, separated by a % sign.

The zone index is used to disambiguate identical address  values.  For link-local addresses, the zone index will typically be the interface index number or the name of an interface. If the zone index is not present, the default zone of the device will be used.

Reference:
 - RFC 4007: IPv6 Scoped Address Architecture


&lt;defaultValue&gt;::&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="Ip6Prefix">
            <description>The Ip6Prefix type represents an IPv6 address prefix.
The prefix length is given by the number following the slash character and must be less than or equal 128.

A prefix length value of n corresponds to an IP address mask which has n contiguous 1-bits from the most significant bit (MSB) and all other bits set to 0.

The IPv6 address should have all bits that do not belong to the prefix set to zero.

::/0</description>
            <baseType>
                <string>
                    <validValues>(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){6}(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:)*(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))/(1(2[0-8]|[0-1][0-9])|[0-9]?[0-9])</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="MacAddress">
            <description>The MacAddress type represents an 802 MAC address represented in the `canonical' order defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first, even though 802.5 (in contrast to other 802.x protocols) requires MAC addresses to be transmitted most significant bit first.

This type is in the value set and its semantics equivalent to the MacAddress textual convention of the SMIv2.

Reference:
- RFC 2579: Textual Conventions for SMIv2

&lt;defaultValue&gt;00:00:00:00:00:00&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="PortNumber">
            <description>The PortNumber type represents a 16-bit port number of an Internet transport layer protocol such as UDP, TCP, DCCP or SCTP. Port numbers are assigned by IANA.  A current list of all assignments is available from http://www.iana.org/.

Note that the value zero is not a valid port number. A union type might be used in situations where the value zero is meaningful.

This type is in the value set and its semantics equivalent to the InetPortNumber textual convention of the SMIv2.

Reference:
- RFC  768: User Datagram Protocol
- RFC  793: Transmission Control Protocol
- RFC 2960: Stream Control Transmission Protocol
- RFC 4340: Datagram Congestion Control Protocol (DCCP)
- RFC 4001: Textual Conventions for Internet Network Addresses

&lt;defaultValue&gt;1&lt;/defaultValue&gt;</description>
            <baseType>
                <uint64>
                    <range>
                        <max>65535</max>
                        <min>1</min>
                    </range>
                </uint64>
            </baseType>
        </derivedDataType>
        <derivedDataType name="PortNumberAny">
            <description>The PortNumber type represents a 16-bit port number of an Internet transport layer protocol such as UDP, TCP, DCCP or SCTP. Port numbers are assigned by IANA.  A current list of all assignments is available from http://www.iana.org/.

Zero port value is allowed and means ANY port number.

This type is in the value set and its semantics equivalent to the InetPortNumber textual convention of the SMIv2.

Reference:
- RFC  768: User Datagram Protocol
- RFC  793: Transmission Control Protocol
- RFC 2960: Stream Control Transmission Protocol
- RFC 4340: Datagram Congestion Control Protocol (DCCP)
- RFC 4001: Textual Conventions for Internet Network Addresses</description>
            <baseType>
                <int64>
                    <range>
                        <max>65535</max>
                        <min>0</min>
                    </range>
                </int64>
            </baseType>
        </derivedDataType>
        <derivedDataType name="DnsName">
            <description>DnsName</description>
            <baseType>
                <string>
                    <validValues>.*</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="NetworkDomainName">
            <description>The NetworkDomainName type represents a DNS domain name. The name SHOULD be fully qualified whenever possible.

The description clause of objects using the NetworkDomainName type MUST describe how (and when) these names are resolved to IP addresses.

Note that the resolution of a NetworkDomainName value may require to query multiple DNS records (e.g., A for IPv4 and AAAA for IPv6). The order of the resolution proces and which DNS record takes precedence depends on the configuration of the resolver.

Reference:
- RFC 1034: Domain Names - Concepts and Facilities
- RFC 1123: Requirements for Internet Hosts -- Application
                    and Support</description>
            <baseType>
                <string>
                    <validValues>(([a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="Host">
            <description>The Host type represents either an IP address or a DNS domain name.</description>
            <baseType>
                <string>
                    <validValues>(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(([0-9a-fA-F]{1,4}:){6})?(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:)*(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))(%[\p{N}\p{L}]+)?|(([a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="VlanId">
            <description>The VlanId type uniquely identifies a VLAN. This is the 12-bit VLAN-ID used in the VLAN Tag header. The range is defined by the referenced specification.

This type is in the value set and its semantics equivalent to the VlanId textual convention of the SMIv2.

Reference:
- IEEE Std 802.1Q 2003 Edition: Virtual Bridged Local Area Networks
- RFC 4363: Definitions of Managed Objects for Bridges with
                    Traffic Classes, Multicast Filtering, and Virtual
                    LAN Extensions

&lt;defaultValue&gt;1&lt;/defaultValue&gt;</description>
            <baseType>
                <uint16>
                    <range>
                        <max>4049</max>
                        <min>1</min>
                    </range>
                </uint16>
            </baseType>
        </derivedDataType>
        <derivedDataType name="EmailAddress">
            <description>EmailAddress</description>
            <baseType>
                <string>
                    <validValues>([A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4})?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="URI">
            <description>The uri type represents a Uniform Resource Identifier
(URI) as defined by STD 66.

Objects using the uri type must be in US-ASCII encoding, and MUST be normalized as described by RFC 3986 Sections 6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary percent-encoding is removed, and all case-insensitive characters are set to lowercase except for hexadecimal digits, which are normalized to uppercase as described in Section 6.2.2.1.

The purpose of this normalization is to help provide unique URIs.  Note that this normalization is not sufficient to provide uniqueness.  Two URIs that are textually distinct after this normalization may still be equivalent.

Objects using the uri type may restrict the schemes that they permit.  For example, 'data:' and 'urn:' schemes might not be appropriate.

A zero-length URI is not a valid URI.  This can be used to express 'URI absent' where required

This type is in the value set and its semantics equivalent to the Uri textual convention of the SMIv2.";

Reference
- RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
- RFC 3305: Report from the Joint W3C/IETF URI Planning Interest
        Group: Uniform Resource Identifiers (URIs), URLs,
        and Uniform Resource Names (URNs): Clarifications
        and Recommendations
- RFC 5017: MIB Textual Conventions for Uniform Resource
        Identifiers (URIs)</description>
            <baseType>
                <string>
                    <validValues>^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="AddressFamilyType">
            <description>Type for IP address families.

&lt;defaultValue&gt;inet&lt;/defaultValue&gt;</description>
            <baseType>
                <string/>
            </baseType>
        </derivedDataType>
        <derivedDataType name="AdministrativeState">
            <description>The administrative state of a managed object as specified in ITU-T X.721 and X.731.

Possible values:
- locked: The resource is administratively prohibited from performing services for its users.
- shutting down: Use of the resource is administratively permitted to existing instances of use only.
- unlocked: The resource is administratively permitted to perform services for its users.


            &lt;validValues&gt;
                &lt;value name="locked"/&gt;
                &lt;value name="unlocked"/&gt;
                &lt;value name="shuttingDown"/&gt;
            &lt;/validValues&gt;
            &lt;defaultValue&gt;unlocked&lt;/defaultValue&gt;
</description>
            <baseType>
                <string>
                    <validValues>locked|unlocked|shuttingDown</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="OperationalState">
            <description>Follows ITU-T X.731

            &lt;validValues&gt;
                &lt;value name="enabled"/&gt;
                &lt;value name="disabled"/&gt;
            &lt;/validValues&gt;
            &lt;defaultValue&gt;disabled&lt;/defaultValue&gt;
</description>
            <baseType>
                <string>
                    <validValues>enabled|disabled</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="IpAddress">
            <description>The IpAddress type represents an IP address and is IP version neutral. The format of the textual representations implies the IP version.

&lt;defaultValue&gt;0.0.0.0&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>((((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)|(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}(%[\p{N}\p{L}]+)?))</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="IpPrefix">
            <description>The IpPrefix type represents an IP prefix and is IP  version neutral. The format of the textual representations implies the IP version.

&lt;defaultValue&gt;0.0.0.0/0&lt;/defaultValue&gt;</description>
            <baseType>
                <string>
                    <validValues>(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])/(3[0-2]|[0-2]?[0-9])|(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){6}(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?|(([0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:)*(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))/(1(2[0-8]|[0-1][0-9])|[0-9]?[0-9])</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="float">
            <baseType>
                <string/>
            </baseType>
        </derivedDataType>
        <derivedDataType name="dateTime">
            <description>'-'? yyyy '-' mm '-' dd 'T' hh ':' mm ':' ss ('.' s+)? ((('+' | '-') hh ':' mm) | 'Z')?</description>
            <baseType>
                <string>
                    <validValues>2.*</validValues>
                </string>
            </baseType>
        </derivedDataType>
    </mim>
</models>
