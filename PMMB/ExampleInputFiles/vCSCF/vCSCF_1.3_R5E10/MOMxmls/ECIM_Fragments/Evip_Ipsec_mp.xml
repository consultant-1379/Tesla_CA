<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2015 Ericsson AB. 
	All rights reserved 

	DX ECIM Tool-chain generated this file on Sep 23, 2015 2:30:16 PM using:
	* com.ericsson.ecim.m2m 3.0.0.201505192318
	* com.ericsson.ecim.dsl 3.0.0.201505192318
	* com.ericsson.ecim.edm 3.0.0.201505192318
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
  <dtdVersion>G</dtdVersion>
  <momMetaData>
    <momTitle>title</momTitle>
    <momSubTitle>sub title</momSubTitle>
    <momIdentity>
      <docNum>0</docNum>
      <docLang>English</docLang>
      <docRev>0.1.001</docRev>
      <docDate>19/11/2012</docDate>
    </momIdentity>
  </momMetaData>
  <mim author="ejanjuv" contact="" correction="0" date="" docNo="" name="Evip_Ipsec" namespace="urn:com:ericsson:ecim:Evip_Ipsec" namespacePrefix="evip_ipsec" organization="" release="0" revision="" version="1">
    <description>Evip implementation of the ECIM Transport Ipsec MOM.</description>
    <domainExtension domain="ECIM">
      <extension name="immNamespace" value="MOM_NAME"/>
    </domainExtension>
    <implements correction="0" name="ECIM_Transport_Ipsec" release="0" version="1"/>
    <struct name="Identity">
      <description>Identification type.&#13;
&#13;
It is an union identity, possible type as follows:&#13;
&#13;
a) ID_FQDN:&#13;
A fully-qualified domain name string. An example of a ID_FQDN is, "example.com". The string MUST not contain any terminators (e.g., NULL, CR, etc.).&#13;
&#13;
b) ID_RFC822_ADDR:&#13;
A fully-qualified RFC822 email address string, An example of a ID_RFC822_ADDR is, "jsmith@example.com". The string MUST not contain any terminators.&#13;
&#13;
c) ID_IPV4_ADDR:&#13;
A single four (4) octet IPv4 address.&#13;
&#13;
d) ID_IPV6_ADDR:&#13;
A single sixteen (16) octet IPv6 address.&#13;
&#13;
e) DN_X509:&#13;
Distinguished name in the X.509 tradition.</description>
      <isExclusive/>
      <structMember name="ipv4Address">
        <description>Specifies the identity as a single four (4) octet IPv4 address.&#13;
&#13;
An example is, "10.10.10.10". &#13;</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="Ipv4UnicastAddressStr">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="ipv6Address">
        <description>Specifies the identity as a single sixteen (16) octet IPv6 address.&#13;
&#13;
An example is, "FF01::101, 2001:DB8:0:0:8:800:200C:417A ". &#13;</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="Ipv6AddressStr">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="fqdnString">
        <description>Specifies the identity as a fully-qualified domain name string.&#13;
&#13;
An example is, "example.com". &#13;
The string MUST not contain any terminators (e.g., NULL, CR, etc.).&#13;</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="FqdnStr">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="rfc822AddressString">
        <description>Specifies the identity as a fully-qualified RFC822 email address string.&#13;
&#13;
An example is, "jsmith@example.com". &#13;
The string MUST not contain any terminators (e.g., NULL, CR, etc.).&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="Rfc822AddressStr">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="dnX509">
        <description>Specifies the identity as a distinguished name in the X.509 tradition.&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
    </struct>
    <struct name="IpsecProposal">
      <description>Ipsec Transform to be proposed during SA negotiation.</description>
      <structMember name="encryptionAlgorithm">
        <description>Specifies the algorithm used for encryption.&#13;</description>
        <sequence>
          <enumRef name="ChildSaEncryptionAlgorithm">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>0</minLength>
        </sequence>
      </structMember>
      <structMember name="integrityAlgorithm">
        <description>Specifies the algorithm used for integrity check.</description>
        <sequence>
          <enumRef name="ChildSaIntegrityAlgorithm">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>0</minLength>
        </sequence>
      </structMember>
      <structMember name="diffieHellmanGroup">
        <description>Specifies a Diffie-Hellman group. &#13;
&#13;
If it is not specified, PFS is disabled.</description>
        <sequence>
          <enumRef name="DiffieHellmanGroup">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>0</minLength>
        </sequence>
      </structMember>
    </struct>
    <struct name="Ikev2Proposal">
      <description>Holds an IKEv2 transform proposal used during IKEv2 SA negotiation.&#13;&#13;
&#13;&#13;
Multiple IKEv2 Transforms can be proposed during an IKEv2 session initiation in an ordered list.</description>
      <structMember name="diffieHellmanGroup">
        <description>Specifies a Diffie-Hellman group. &#13;
</description>
        <sequence>
          <enumRef name="DiffieHellmanGroup">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>1</minLength>
        </sequence>
      </structMember>
      <structMember name="encryptionAlgorithm">
        <description>Specifies an encryption algorithm. &#13;
</description>
        <sequence>
          <enumRef name="IkeEncryptionAlgorithm">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>1</minLength>
        </sequence>
      </structMember>
      <structMember name="integrityAlgorithm">
        <description>Specifies an algorithm for integrity check. &#13;
</description>
        <sequence>
          <enumRef name="IkeIntegrityAlgorithm">
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
          <minLength>1</minLength>
        </sequence>
      </structMember>
    </struct>
    <struct name="TrafficSelector">
      <description>Traffic selector to be used for SA negotiation.</description>
      <structMember name="protocolName">
        <description>Specifies the protocol selector. &#13;</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <enumRef name="TransportProtocolName">
          <mimName>Evip_Ipsec</mimName>
        </enumRef>
      </structMember>
      <structMember name="addressRange">
        <description>Specifies the IPv4 or IPv6 address range. &#13;
</description>
        <derivedDataTypeRef name="IpAddressRangeStr">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="port">
        <description>Specifies the port selector.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="L4Port">
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
    </struct>
    <struct name="ChildSaLifetime">
      <description>Lifetime for the negotiated ChildSAs.</description>
      <structMember name="timeLimit">
        <description>Specifies the maximum lifetime when a SA can be used.</description>
        <derivedDataTypeRef name="TimeLimit">
          <defaultValue>60</defaultValue>
          <mimName>Evip_Ipsec</mimName>
        </derivedDataTypeRef>
      </structMember>
    </struct>
    <enum name="ChildSaEncryptionAlgorithm">
      <description>Child Security Association(SA) encryption algorithms.</description>
      <enumMember name="ENCR_NULL">
        <description>ENCR_NULL --&gt; RFC_2410. </description>
        <value>11</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_128">
        <description>ENCR_AES_CBC_128 --&gt; RFC_5996. </description>
        <value>1024</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_256">
        <description>ENCR_AES_CBC_128 --&gt; RFC_5996. </description>
        <value>1026</value>
      </enumMember>
      <enumMember name="ENCR_3DES">
        <description>ENCR_3DES --&gt; RFC_5996. </description>
        <value>3</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_192">
        <description>ENCR_AES_CBC_192 --&gt; RFC_5996. </description>
        <value>1025</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_128">
        <description>ENCR_BLOWFISH_128 --&gt; RFC_5996. </description>
        <value>1027</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_192">
        <description>ENCR_BLOWFISH_192 --&gt; RFC_5996. </description>
        <value>1028</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_256">
        <description>ENCR_BLOWFISH_256 --&gt; RFC_5996. </description>
        <value>1029</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_128">
        <description>ENCR_CAMELLIA_128 --&gt; RFC_5996. </description>
        <value>1031</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_192">
        <description>ENCR_CAMELLIA_192 --&gt; RFC_5996. </description>
        <value>1032</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_256">
        <description>ENCR_CAMELLIA_256 --&gt; RFC_5996. </description>
        <value>1033</value>
      </enumMember>
    </enum>
    <enum name="DiffieHellmanGroup">
      <description>Diffie-Hellman groups. &#13;
</description>
      <enumMember name="MODP_768_GROUP_1">
        <description>GROUP_1 --&gt; RFC_5996. </description>
        <value>1</value>
      </enumMember>
      <enumMember name="MODP_1024_GROUP_2">
        <description>GROUP_2 --&gt; RFC_5996. </description>
        <value>2</value>
      </enumMember>
      <enumMember name="MODP_1536_GROUP_5">
        <description>GROUP_5 --&gt; RFC_3526. </description>
        <value>5</value>
      </enumMember>
      <enumMember name="MODP_2048_GROUP_14">
        <description>GROUP_14 --&gt; RFC_3526. </description>
        <value>14</value>
      </enumMember>
      <enumMember name="MODP_3072_GROUP_15">
        <description>GROUP_15 --&gt; RFC_3526. </description>
        <value>15</value>
      </enumMember>
      <enumMember name="MODP_4096_GROUP_16">
        <description>GROUP_16 --&gt; RFC_3526. </description>
        <value>16</value>
      </enumMember>
      <enumMember name="MODP_6144_GROUP_17">
        <description>GROUP_17 --&gt; RFC_3526. </description>
        <value>17</value>
      </enumMember>
      <enumMember name="MODP_8192_GROUP_18">
        <description>GROUP_18 --&gt; RFC_3526. </description>
        <value>18</value>
      </enumMember>
    </enum>
    <enum name="ConnectionType">
      <description>Connection type for IKE session.&#13;</description>
      <enumMember name="RESPONDER">
        <description>ME will act as responder for bringing up IKEv2 session with its IKE peer.</description>
        <value>1</value>
      </enumMember>
      <enumMember name="BOTH">
        <description>ME can act as initiator or responder.</description>
        <value>2</value>
      </enumMember>
    </enum>
    <enum name="TransportProtocolName">
      <description>Enumeration of well known transport protocols.</description>
      <enumMember name="TCP">
        <value>1</value>
      </enumMember>
      <enumMember name="UDP">
        <value>2</value>
      </enumMember>
      <enumMember name="SCTP">
        <value>3</value>
      </enumMember>
      <enumMember name="ICMP">
        <value>4</value>
      </enumMember>
    </enum>
    <enum name="ChildSaIntegrityAlgorithm">
      <description>Child Security Association(SA) integrity algorithms.</description>
      <enumMember name="AUTH_AES_XCBC_96">
        <description>AUTH_AES_XCBC_96 --&gt; RFC_5996. &#13;
&#13;
</description>
        <value>5</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA1_96">
        <description>AUTH_HMAC_SHA1_96 --&gt; RFC_5996. </description>
        <value>2</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_MD5_96">
        <description>AUTH_HMAC_MD5_96 --&gt; RFC_5996. </description>
        <value>1</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_MD5_128">
        <description>AUTH_HMAC_MD5_128 --&gt; RFC_5996. </description>
        <value>6</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA1_160">
        <description>AUTH_HMAC_SHA1_160. </description>
        <value>7</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA2_256_128">
        <description>AUTH_HMAC_SHA2_256_128.</description>
        <value>12</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA2_384_192">
        <description>AUTH_HMAC_SHA2_384_192.</description>
        <value>13</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA2_512_256">
        <description>AUTH_HMAC_SHA2_512_256.</description>
        <value>14</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_SHA2_256_96">
        <description>AUTH_HMAC_SHA2_256_96.</description>
        <value>1024</value>
      </enumMember>
    </enum>
    <enum name="IkeEncryptionAlgorithm">
      <description>Ike encryption algorithms. &#13;
</description>
      <enumMember name="ENCR_3DES">
        <description>ENCR_3DES --&gt; RFC_5996. &#13;
</description>
        <value>3</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_128">
        <description>ENCR_AES_CBC --&gt; RFC_5996. &#13;
</description>
        <value>1024</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_192">
        <description>ENCR_AES_CBC --&gt; RFC_5996.</description>
        <value>1025</value>
      </enumMember>
      <enumMember name="ENCR_AES_CBC_256">
        <description>ENCR_AES_CBC --&gt; RFC_5996. &#13;
</description>
        <value>1026</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_128">
        <description>ENCR_BLOWFISH_128 --&gt; RFC_5996. </description>
        <value>1027</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_192">
        <description>ENCR_BLOWFISH_192 --&gt; RFC_5996. </description>
        <value>1028</value>
      </enumMember>
      <enumMember name="ENCR_BLOWFISH_256">
        <description>ENCR_BLOWFISH_256 --&gt; RFC_5996. </description>
        <value>1029</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_128">
        <description>ENCR_CAMELLIA_128 --&gt; RFC_5996. </description>
        <value>1031</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_192">
        <description>ENCR_CAMELLIA_192 --&gt; RFC_5996. </description>
        <value>1032</value>
      </enumMember>
      <enumMember name="ENCR_CAMELLIA_256">
        <description>ENCR_CAMELLIA_256 --&gt; RFC_5996. </description>
        <value>1033</value>
      </enumMember>
      <enumMember name="ENCR_NULL">
        <description>ENCR_NULL --&gt; RFC_2410. </description>
        <value>11</value>
      </enumMember>
    </enum>
    <enum name="IkeIntegrityAlgorithm">
      <description>Ike integrity algorithms. &#13;
</description>
      <enumMember name="AUTH_HMAC_SHA1_96">
        <description>AUTH_HMAC_SHA1_96 --&gt; RFC_5996. &#13;
</description>
        <value>2</value>
      </enumMember>
      <enumMember name="AUTH_HMAC_MD5_96">
        <description>AUTH_HMAC_MD5_96 --&gt; RFC_5996. &#13;
</description>
        <value>1</value>
      </enumMember>
      <enumMember name="AUTH_AES_XCBC_96">
        <description>AUTH_AES_XCBC_96 --&gt; RFC_5996. &#13;
</description>
        <value>5</value>
      </enumMember>
    </enum>
    <derivedDataType name="Ipv4UnicastAddressStr">
      <description>IPv4 address string, controlled by a regular expression.&#13;
&#13;
Address is to be specified in dotted-quad decimal notation in accordance with RFC791, without leading 0s.&#13;
IPv4 address within range [1-126,128-223].[0-255].[0-255].[0-255], 7-15 characters. &#13;
Valid characters: 0123456789.&#13;
&#13;
Regex:&#13;
(^((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$)&#13;
&#13;
Examples: 1.1.1.1, 1.1.255.255 </description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_CommonLibrary"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>(^((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$)</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[(^((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$)]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="TimeLimit">
      <description>The maximum time in minutes.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <uint32>
          <unit>minutes</unit>
        </uint32>
      </baseType>
    </derivedDataType>
    <derivedDataType name="Ipv6AddressStr">
      <description>IPv6 address string, controlled by a regular expression.&#13;
&#13;
Address is to be specified in colon separated hexadecimal notation as described in RFC 4291 section 2.2 items 1-3, but without leading 0s.&#13;
IPv6 addresses length: 3-39 characters.&#13;
Valid characters: 0123456789abcdefABCDEF:&#13;
&#13;
Regex:&#13;
(^\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|&#13;
((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|&#13;
(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)&#13;
&#13;
Examples: FF01::101, 2001:DB8:0:0:8:800:200C:417A</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_CommonLibrary"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>(^\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[(^\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$)]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="L4Port">
      <description>Transport protocol port [0..65535] value.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <uint32>
          <range>
            <min>0</min>
            <max>65535</max>
          </range>
          <ranges>
            <subrange>
              <min>0</min>
              <max>65535</max>
            </subrange>
          </ranges>
        </uint32>
      </baseType>
    </derivedDataType>
    <derivedDataType name="PresharedKey">
      <description>Derived string used as presharedkey.</description>
      <baseType>
        <string/>
      </baseType>
    </derivedDataType>
    <derivedDataType name="IpAddressRangeStr">
      <description>Regular expression pattern for IP address with prefix, covering both IPv4 and IPv6.&#13;
&#13;
The type is ((IPv4 address)|(IPv6 address)) / prefix without leading 0s:&#13;
		  Unicast IPv4 address / prefix 0-32.&#13;&#13;
		  IPv4 address within range [0-255].[0-255].[0-255].[0-255]&#13;&#13;
		  Regex:&#13;&#13;
(^(([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2])$)&#13;
		 &#13;
		 Ipv6Address (colon separated, rfc4291) / prefix 0-128.&#13;&#13;
		 Regex:&#13;&#13;
\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])		 &#13;
&#13;
		 Thus resulting pattern ^((IPv4Network/Netmask)|(IPv6Network/Netmask))$ is:&#13;&#13;
^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$&#13;
		 </description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="FqdnStr">
      <description>Fully Qualified Domain Name.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>(?=^.{1,254}$)(^(?:(?!\d+\.|-)[a-zA-Z0-9_\-]{1,63}(?&lt;!-)\.?)+(?:[a-zA-Z]{2,})$)</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[(?=^.{1,254}$)(^(?:(?!\d+\.|-)[a-zA-Z0-9_\-]{1,63}(?<!-)\.?)+(?:[a-zA-Z]{2,})$)]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="IpAddress">
      <description>Regular expression pattern for IP assigned address, covering both IPv4 and IPv6.&#13;
&#13;
The type is ((IPv4 address)|(IPv6 address)), without leading 0s.&#13;
&#13;
IpV4 address = ((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))&#13;
&#13;
IPv6 address = (\s*((((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)&#13;
&#13;
Matching example is: 192.168.21.3&#13;
Another matching example is: 2001:db8:85a3:8d3:1319:8a2e:370:7348</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>^(((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*))$</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*))$]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="Rfc822AddressStr">
      <description>Validates the RFC 822 syntax.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimRelease" value="0"/>
        <extension name="originatingMimName" value="ECIM_Transport_FilterTypes"/>
        <extension name="originatingMimVersion" value="1"/>
      </domainExtension>
      <baseType>
        <string>
          <validValues>^\s*(([/-9!#-'*+=?A-~-]+(?:\.[/-9!#-'*+=?A-~-]+)*|"(?:[^"\r\n\\]|\\.)*")@([A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?(?:\.[A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?)*|\[(?:[^\[\]\r\n\\]|\\.)*\]))\s*$</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^\s*(([/-9!#-'*+=?A-~-]+(?:\.[/-9!#-'*+=?A-~-]+)*|"(?:[^"\r\n\\]|\\.)*")@([A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?(?:\.[A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?)*|\[(?:[^\[\]\r\n\\]|\\.)*\]))\s*$]]></rule>
      </validationRules>
    </derivedDataType>
    <derivedDataType name="Evip_Ipsec_Ikev2PolicyProfile_ikeSaLifetime">
      <baseType>
        <uint32>
          <unit>mins</unit>
        </uint32>
      </baseType>
    </derivedDataType>
    <derivedDataType name="Evip_Ipsec_Ikev2PolicyProfile_dpdKeepAliveInterval">
      <baseType>
        <uint32>
          <unit>secs</unit>
        </uint32>
      </baseType>
    </derivedDataType>
    <class name="Ikev2PolicyProfile">
      <description>Common information for multiple IKE sessions to be instantiated on a managed element.&#13;
&#13;
One or more Ikev2Session instances might refer to this instance.</description>
      <attribute name="ikev2PolicyProfileId">
        <description>Value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="trustCategory">
        <description>Reference to a  trusted certificates group.&#13;
&#13;
Valid reference is TrustCategory in Certificate Management Branch.&#13;&#13;&#13;
If credential and trustCategory are not specified, then pre-shared key based authentication is selected. The referring Ikev2Session instances have to have pre-shared keys installed.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <moRef name="ManagedObject"/>
        </dataType>
      </attribute>
      <attribute name="identityLocal">
        <description>Local identity.&#13;
&#13;
If the local identity is not configured, it is automatically configured in the system as follows:&#13;&#13;
a) In case of certificate based authentication, the local identity is set to the same value as specified by the subject alt name in the certificate that the node use.&#13;
b) In case of preshared key-based authentication, the local identity is set to the local IP address of the tunnel.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <structRef name="Identity">
            <mimName>Evip_Ipsec</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="ikev2Proposal">
        <description>Ordered list of IKE proposals to be used for IKE SA negotiation.&#13;
&#13;
At least one IKE proposal must be specified. The first one in the list has the highest priority.</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <sequence>
            <structRef name="Ikev2Proposal">
              <mimName>Evip_Ipsec</mimName>
            </structRef>
            <minLength>1</minLength>
            <nonUnique/>
            <ordered/>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="ikeSaLifetime">
        <description>Lifetime for IKE SA.</description>
        <restricted/>
        <dataType>
          <derivedDataTypeRef name="Evip_Ipsec_Ikev2PolicyProfile_ikeSaLifetime">
            <defaultValue>180</defaultValue>
            <mimName>Evip_Ipsec</mimName>
          </derivedDataTypeRef>
        </dataType>
      </attribute>
      <attribute name="connectionType">
        <description>Connection type of the IKEv2 session.</description>
        <restricted/>
        <dataType>
          <enumRef name="ConnectionType">
            <defaultValue>BOTH</defaultValue>
            <mimName>Evip_Ipsec</mimName>
          </enumRef>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Label for free use.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="dpdKeepAliveInterval">
        <description>The keep alive interval with which INFORMATIONAL exchanges are sent to the peer.
</description>
        <restricted/>
        <dataType>
          <derivedDataTypeRef name="Evip_Ipsec_Ikev2PolicyProfile_dpdKeepAliveInterval">
            <defaultValue>30</defaultValue>
            <mimName>Evip_Ipsec</mimName>
          </derivedDataTypeRef>
        </dataType>
      </attribute>
      <attribute name="credential">
        <description>Reference to the managed element own credential to be used in IKEv2 negotiation. 

Valid reference is a NodeCredential in Certificate Management Branch.


If credential and trustCategory are not specified, then preshared key-based authentication is selected. The referring Ikev2Session instances must have preshared keys installed.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <moRef name="ManagedObject"/>
        </dataType>
      </attribute>
    </class>
    <class name="IpsecProposalProfile">
      <description>Configuration information for Ipsec policies.</description>
      <validationRules>
        <rule exceptionText="" format="ECIM_Schematron_1.0" name="Constraint_IpsecProposalProfile"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                              <assert id='create' test='( (count(@ipsecProposal/@diffieHellmanGroup) eq 0) or (every $var in ../IpsecTunnel/Phase2Policy/@ipsecProposalProfile/@ipsecProposalProfileId satisfies (not(@ipsecProposalProfileId eq $var))) )'>Only IKEv2 can set DH-group.</assert>
                        </rule>
                    </pattern>
                </schema>]]></rule>
      </validationRules>
      <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                              <assert id='create' test='( (count(@ipsecProposal/@diffieHellmanGroup) eq 0) or (every $var in ../IpsecTunnel/Phase2Policy/@ipsecProposalProfile/@ipsecProposalProfileId satisfies (not(@ipsecProposalProfileId eq $var))) )'>Only IKEv2 can set DH-group.</assert>
                        </rule>
                    </pattern>
                </schema>]]></dependenciesScript>
      <attribute name="ipsecProposalProfileId">
        <description>Value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="childSaLifetime">
        <description>Lifetime for the negotiated ChildSAs. </description>
        <mandatory/>
        <restricted/>
        <dataType>
          <structRef name="ChildSaLifetime">
            <mimName>Evip_Ipsec</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="ipsecProposal">
        <description>An ordered list of Ipsec transforms to be proposed during IKEv2 negotiation. &#13;
</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <sequence>
            <structRef name="IpsecProposal">
              <mimName>Evip_Ipsec</mimName>
            </structRef>
            <minLength>1</minLength>
            <nonUnique/>
            <ordered/>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Label for free use.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
    </class>
    <class name="IpsecTunnel">
      <description>Configuration and runtime information of an Ipsec tunnel between two end points.</description>
      <attribute name="ipsecTunnelId">
        <description>Value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Label for free use.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="localAddressStr">
        <description>Tunnel local endpoint assigned IP address.

Rule: The local and remote address must have the same address family and belong to the same routing domain.</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <derivedDataTypeRef name="IpAddress">
            <mimName>Evip_Ipsec</mimName>
          </derivedDataTypeRef>
        </dataType>
      </attribute>
      <attribute name="remoteAddressStr">
        <description>Tunnel remote end point external IP address.

Rule: The local and remote address must have the same address family and belong to the same routing domain.</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <derivedDataTypeRef name="IpAddress">
            <mimName>Evip_Ipsec</mimName>
          </derivedDataTypeRef>
        </dataType>
      </attribute>
    </class>
    <class name="IpsecPolicy">
      <description>Holds configuration information for Ipsec policies.</description>
      <validationRules>
        <rule exceptionText="" format="ECIM_Schematron_1.0" name="Constraint_IpsecPolicy"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                             <assert id='create' test='( (count(../Phase2Policy) eq 0) and (count(../Ikev1Session) eq 0) )'>Under one IpsecTunnel instance there can be only IKEv1 or only IKEv2.</assert>
                        </rule>
                    </pattern>
                </schema>]]></rule>
      </validationRules>
      <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                             <assert id='create' test='( (count(../Phase2Policy) eq 0) and (count(../Ikev1Session) eq 0) )'>Under one IpsecTunnel instance there can be only IKEv1 or only IKEv2.</assert>
                        </rule>
                    </pattern>
                </schema>]]></dependenciesScript>
      <attribute name="ipsecPolicyId">
        <description>Value component of the RDN.&#13;
</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="ipsecProposalProfile">
        <description>Reference to an Ipsec transform profile.&#13;</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <moRef name="IpsecProposalProfile">
            <mimName>Evip_Ipsec</mimName>
          </moRef>
        </dataType>
      </attribute>
      <attribute name="localTrafficSelector">
        <description>Ordered list of traffic selectors to be used for SA negotiation.&#13;
&#13;
If localTrafficSelector is not specified, it means that all the local addresses and subnets within the current routing domain are included.&#13;
The first in the list has the highest priority.</description>
        <restricted/>
        <dataType>
          <sequence>
            <structRef name="TrafficSelector">
              <mimName>Evip_Ipsec</mimName>
            </structRef>
            <minLength>0</minLength>
            <nonUnique/>
            <ordered/>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="remoteTrafficSelector">
        <description>Ordered list of traffic selectors to be used for SA negotiation. &#13;
&#13;
If remoteTrafficSelector is not specified, it means wildcard(i.e. any possible IP address, protocol etc).&#13;&#13;
The first in the list has the highest priority.&#13;</description>
        <restricted/>
        <dataType>
          <sequence>
            <structRef name="TrafficSelector">
              <mimName>Evip_Ipsec</mimName>
            </structRef>
            <minLength>0</minLength>
            <nonUnique/>
            <ordered/>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Label for free use.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
    </class>
    <class name="Ikev2Session">
      <description>Ikev2Session is used to specify that IKEv2 should be used to negotiate SA’s for the tunnel. &#13;
&#13;
It contains parameters specific to the IKEv2 protocol.</description>
      <validationRules>
        <rule exceptionText="" format="ECIM_Schematron_1.0" name="Constraint_Ikev2Session"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                             <assert id='create' test='( (count(../Phase2Policy) eq 0) and (count(../Ikev1Session) eq 0) )'>Under one IpsecTunnel instance there can be only IKEv1 or only IKEv2.</assert>
                        </rule>
                    </pattern>
                </schema>]]></rule>
      </validationRules>
      <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
                    <pattern>
                        <rule>
                             <assert id='create' test='( (count(../Phase2Policy) eq 0) and (count(../Ikev1Session) eq 0) )'>Under one IpsecTunnel instance there can be only IKEv1 or only IKEv2.</assert>
                        </rule>
                    </pattern>
                </schema>]]></dependenciesScript>
      <action name="installPreSharedKey">
        <description>Install a preshared key for the IKEv2 session.&#13;
&#13;
The installation of the pre-shared key is completed if the action is completed without error. Any error returned by the action indicates that the installation is not performed.&#13;
If both credential and trustCategory have valid references, then the preshared key is not used even if it is installed.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="0"/>
        </domainExtension>
        <returnType>
          <void/>
        </returnType>
        <parameter name="presharedKey">
          <description>String used as presharedkey.</description>
          <in/>
          <dataType>
            <derivedDataTypeRef name="PresharedKey">
              <mimName>Evip_Ipsec</mimName>
            </derivedDataTypeRef>
          </dataType>
        </parameter>
      </action>
      <attribute name="ikev2SessionId">
        <description>Value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="ikev2PolicyProfile">
        <description>Reference to an IKE policy profile instance.</description>
        <mandatory/>
        <restricted/>
        <dataType>
          <moRef name="Ikev2PolicyProfile">
            <mimName>Evip_Ipsec</mimName>
          </moRef>
        </dataType>
      </attribute>
      <attribute name="identityRemote">
        <description>Identity of the IKEv2 peer.&#13;
&#13;
If identityRemote is not specified, the session will validate the remote IKE identify as follows:&#13;
a) In case of certificate based authentication, the peer’s IKE ID must be consistent with either the subject alt name or the subject field in the peers certificate;&#13;
b) In case of pre-shared key based authentication, the peer's IKE ID must be consistent with the configured IP address of the peer.&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <structRef name="Identity">
            <mimName>Evip_Ipsec</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Label for free use.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <restricted/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
    </class>
    <relationship name="IpsecTunnel_to_IpsecPolicy">
      <containment>
        <parent>
          <hasClass name="IpsecTunnel">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="IpsecPolicy">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="true"/>
          <extension name="canDelete" value="true"/>
        </domainExtension>
      </containment>
    </relationship>
    <relationship name="IpsecTunnel_to_Ikev2Session">
      <containment>
        <parent>
          <hasClass name="IpsecTunnel">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="Ikev2Session">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
            <max>1</max>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="true"/>
          <extension name="canDelete" value="true"/>
        </domainExtension>
      </containment>
    </relationship>
  </mim>
  <interMim>
    <relationship name="Host_to_Ikev2PolicyProfile">
      <domainExtension domain="CoreMW">
        <extension name="splitImmDn" value="false"/>
      </domainExtension>
      <containment>
        <parent>
          <hasClass name="Host">
            <mimName>Evip_Host</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="Ikev2PolicyProfile">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="true"/>
          <extension name="canDelete" value="true"/>
        </domainExtension>
      </containment>
    </relationship>
  </interMim>
  <interMim>
    <relationship name="Host_to_IpsecProposalProfile">
      <domainExtension domain="CoreMW">
        <extension name="splitImmDn" value="false"/>
      </domainExtension>
      <decisionPoint>
        <decisionStatement decisionType="basic">if-feature HostToIpsecProposalProfile</decisionStatement>
      </decisionPoint>
      <containment>
        <parent>
          <hasClass name="Host">
            <mimName>Evip_Host</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="IpsecProposalProfile">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="true"/>
          <extension name="canDelete" value="true"/>
        </domainExtension>
      </containment>
    </relationship>
  </interMim>
  <interMim>
    <relationship name="Host_to_IpsecTunnel">
      <domainExtension domain="CoreMW">
        <extension name="splitImmDn" value="false"/>
      </domainExtension>
      <decisionPoint>
        <decisionStatement decisionType="basic">if-feature HostToIpsecTunnel</decisionStatement>
      </decisionPoint>
      <containment>
        <parent>
          <hasClass name="Host">
            <mimName>Evip_Host</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="IpsecTunnel">
            <mimName>Evip_Ipsec</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="true"/>
          <extension name="canDelete" value="true"/>
        </domainExtension>
      </containment>
    </relationship>
  </interMim>
</models>
