<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2015 Ericsson AB. 
	All rights reserved 

	DX ECIM Tool-chain generated this file on 27/08/2015 3:57:08 PM using:
	* com.ericsson.ecim.m2m 3.0.1.201508162319
	* com.ericsson.ecim.dsl 3.0.1.201508162319
	* com.ericsson.ecim.edm 3.0.1.201508162319
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
  <dtdVersion>G</dtdVersion>
  <momMetaData>
    <momTitle>title</momTitle>
    <momSubTitle>sub title</momSubTitle>
    <momIdentity>
      <docNum>0</docNum>
      <docLang>English</docLang>
      <docRev>0</docRev>
      <docDate>2013-05-21</docDate>
    </momIdentity>
    <createdBy>
      <signature>xdavbyr</signature>
    </createdBy>
  </momMetaData>
  <mim author="XDAVBYR" contact="David.Byrne@dektech.com.au" correction="3" date="2015-08-27" docNo="" name="CmwSwM" namespace="urn:com:ericsson:ecim:CmwSwM" namespacePrefix="cmwswm" organization="XDT/DEK" release="3" revision="L" version="4">
    <description>CoreMW Software management model.</description>
    <domainExtension domain="ECIM">
      <extension name="ecimMomName" value="ECIM_SwM"/>
      <extension name="ecimMomVersion" value="2"/>
      <extension name="ecimMomRelease" value="0"/>
      <extension name="immNamespace" value="MOM_NAME"/>
    </domainExtension>
    <implements name="ECIM_SwM" release="0" version="2"/>
    <struct name="AsyncActionProgress">
      <description>Records the progress of an asynchronous action.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <structMember name="actionName">
        <description>Name of the invoked asynchronous action.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
      <structMember name="additionalInfo">
        <description>Used for logging significant messages during execution of an action.</description>
        <sequence>
          <string/>
          <minLength>0</minLength>
        </sequence>
      </structMember>
      <structMember name="progressInfo">
        <description>Textual information that describes the actual state of the action execution.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
      <structMember name="progressPercentage">
        <description>Progress of the action.&#13;
The range is between 0 and 100.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <uint8/>
      </structMember>
      <structMember name="result">
        <description>Result state of a completed action.&#13;
This field has value NOT_AVAILABLE if the action is not finished.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <enumRef name="ActionResultType">
          <mimName>CmwSwM</mimName>
        </enumRef>
      </structMember>
      <structMember name="resultInfo">
        <description>Textual description of the outcome/result of the action containing useful information for the NMS.&#13;
If the action failed, it can contain an error message.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
      <structMember name="state">
        <description>Current state of the action.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <enumRef name="ActionStateType">
          <mimName>CmwSwM</mimName>
        </enumRef>
      </structMember>
      <structMember name="actionId">
        <description>Uniquely identifies the invocation of an action.&#13;
Identify the the invocation of an action when the managed object allows invocation of more than one action at a time.</description>
        <uint16/>
      </structMember>
      <structMember name="timeActionStarted">
        <description>Date and time when the current action was started.</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="timeActionCompleted">
        <description>Date and time when the action was completed (successfully or unsuccessfully).</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="timeOfLastStatusUpdate">
        <description>Date and time when the struct member state was last updated.</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
    </struct>
    <struct name="ActivationStep">
      <description>Activation step details.</description>
      <structMember name="serialNumber">
        <description>Activation step number, position of the activation step in the activation procedure.&#13;
&#13;
Starting at 1.</description>
        <int16/>
      </structMember>
      <structMember name="name">
        <description>Activation step name.</description>
        <string/>
      </structMember>
      <structMember name="description">
        <description>Any text describing the role/meaning/interpretation of the activation step, any info which is useful for the operator</description>
        <string/>
      </structMember>
    </struct>
    <struct name="EcimPassword">
      <description>Stores the password.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <structMember name="cleartext">
        <description>Indicates whether or not the password is entered in cleartext.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="EcimEmpty">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="password">
        <description>Holds the password or passphrase text.</description>
        <domainExtension domain="ECIM">
          <extension name="isKey" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
    </struct>
    <struct name="AsyncActionProgressWithSteps">
      <description>The progress of an ongoing action.&#13;
&#13;
Some actions can have 1+ breakpoints. Breakpoints allow an action be be divide into defined steps. A breakpoint is an intentional stop of an (executing) action. &#13;
Example the Activate action in the ECIM SwM MOM. The activate action puts an upgrade package into operation. A breakpoint represents a part of the upgrade after which the functionality of  the ME can be manually observed. I.e. the breakpoint(s) give the operator an option to manually verify that the (upgrade) step has been executed correctly. &#13;
&#13;
The ProgressReport MOC models a standard action. This MOC struct has same attributes as the ProgressReport MOC, plus two extra attributes step and stepProgressPercentage. &#13;
step: This attribute stores the current execution action Step (number)&#13;
stepProgressPercentage: This attribue stores the Progress Percentage of current executing action step.</description>
      <structMember name="actionName">
        <description>Name of the invoked action.&#13;
&#13;
(e.g., prepare(), verify(), activate() on UpgradePackage MO).</description>
        <string/>
      </structMember>
      <structMember name="additionalInfo">
        <description>Used for logging significant messages during execution of an action.&#13;
&#13;
 I.e., it contains information about the "history" of the execution. This field contains the log entries as an array. It may be empty.&#13;
This information is for display only; it is not recommended to build any logic on the content of this field.</description>
        <sequence>
          <string/>
          <minLength>0</minLength>
        </sequence>
      </structMember>
      <structMember name="progressInfo">
        <description>Textual information (description) of the "actual state" of the execution, which might be useful/needed by NMS.&#13;
&#13;
This information is for display only; it is not recommended to build any logic on the content of this field.</description>
        <string/>
      </structMember>
      <structMember name="progressPercentage">
        <description>Progress of completion of the action. &#13;
&#13;
Range is between 0 and 100. The implementation shall intend to calculate the percentage time-wise. (This is preferable, but not compulsory.)</description>
        <uint8/>
      </structMember>
      <structMember name="result">
        <description>Result of completed action.&#13;
&#13;
This field has a value NOT_AVAILABLE if the action is not finished.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <enumRef name="ActionResultType">
          <mimName>CmwSwM</mimName>
        </enumRef>
      </structMember>
      <structMember name="resultInfo">
        <description>Textual description of the outcome/result of the action containing useful info for the NMS.&#13;
&#13;
E.g., it can contain an error message if the action failed.&#13;
This information is for display only; it is not recommended to build any logic on the content of this field.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <string/>
      </structMember>
      <structMember name="state">
        <description>Current state of the action.</description>
        <enumRef name="ActionStateType">
          <mimName>CmwSwM</mimName>
        </enumRef>
      </structMember>
      <structMember name="actionId">
        <description>Id of the action.&#13;
&#13;
Each action has an action id, which is used for querying the progress of an action.</description>
        <uint16/>
      </structMember>
      <structMember name="timeActionStarted">
        <description>The date and time when the current action was started.</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="timeActionCompleted">
        <description>The date and time when the action was completed either successfully or unsuccessfully.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="timeOfLastStatusUpdate">
        <description>The date and time when this MO Struct was last updated.&#13;
&#13;
I.e., the last date and time when any attribute changed.</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="step">
        <description>Current execution action step number.&#13;
 &#13;
</description>
        <int16/>
      </structMember>
      <structMember name="stepProgressPercentage">
        <description>Progress of completion of the currently executing action step.</description>
        <int8/>
      </structMember>
    </struct>
    <struct name="ProductData">
      <description>Represents an Ericsson software product.&#13;
The product name, product number, and product revision represent product information stored in PRIM realization part.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <structMember name="productName">
        <description>Name of the product.</description>
        <string/>
      </structMember>
      <structMember name="productNumber">
        <description>Product number of the product.</description>
        <string/>
      </structMember>
      <structMember name="productRevision">
        <description>Revision state of the product.</description>
        <string/>
      </structMember>
      <structMember name="productionDate">
        <description>Production date of the product.</description>
        <derivedDataTypeRef name="DateTime">
          <mimName>CmwSwM</mimName>
        </derivedDataTypeRef>
      </structMember>
      <structMember name="description">
        <description>Free text description of the product.</description>
        <string/>
      </structMember>
      <structMember name="type">
        <description>Free text description of the product type.</description>
        <string/>
      </structMember>
    </struct>
    <enum name="ActionStateType">
      <description>Lists the action states.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <enumMember name="CANCELLING">
        <description>Cancellation is in progress.</description>
        <value>1</value>
      </enumMember>
      <enumMember name="RUNNING">
        <description>The execution of the action is currently in progress.</description>
        <value>2</value>
      </enumMember>
      <enumMember name="FINISHED">
        <description>The action is finished.</description>
        <value>3</value>
      </enumMember>
      <enumMember name="CANCELLED">
        <description>The action has been cancelled and cancellation has been done.</description>
        <value>4</value>
      </enumMember>
    </enum>
    <enum name="SwMTimeoutFallbackCapability">
      <description>Fallback support.</description>
      <enumMember name="SUPPORTED">
        <description>Indicates that the fallback capability is supported.</description>
        <value>1</value>
      </enumMember>
      <enumMember name="NOT_SUPPORTED">
        <description>Indicates that the fallback capability is not supported.</description>
        <value>2</value>
      </enumMember>
    </enum>
    <enum name="ActionResultType">
      <description>Lists the different results of an action.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <enumMember name="SUCCESS">
        <description>The asynchronous action ended with success.</description>
        <value>1</value>
      </enumMember>
      <enumMember name="FAILURE">
        <description>The asynchronous action ended with failure.</description>
        <value>2</value>
      </enumMember>
      <enumMember name="NOT_AVAILABLE">
        <description>No result is available yet.</description>
        <value>3</value>
      </enumMember>
    </enum>
    <enum name="UpgradePackageState">
      <description>Lists possible states of the Upgrade Package.</description>
      <enumMember name="INITIALIZED">
        <description>The Upgrade Package is initialized. &#13;
&#13;
The administrative data and activations steps of the UP can be read.&#13;
In this state, only the prepare() action may be called.&#13;
 &#13;
</description>
        <value>1</value>
      </enumMember>
      <enumMember name="PREPARE_IN_PROGRESS">
        <description>Prepare action in progress.&#13;
&#13;
In this state, only the cancel() action may be called. If the prepare() action completes successfully, the UP moves to PREPARE_COMPLETED state. If the prepare() action fails (or cancel() is called), the UP moves back to INITIALIZED state.</description>
        <value>2</value>
      </enumMember>
      <enumMember name="PREPARE_COMPLETED">
        <description>Prepare action has successfully finished.&#13;
&#13;
In this state, only the verify() or the activate() action may be called.&#13;
If the activate() action is called, the UP moves to ACTIVATION_IN_PROGRESS state.</description>
        <value>3</value>
      </enumMember>
      <enumMember name="ACTIVATION_IN_PROGRESS">
        <description>Activation is in progress.&#13;
&#13;
In this state, only the cancel() action may be called.&#13;
If the cancel() action is called, the UP moves to DEACTIVATION_IN_PROGRESS state.&#13;
If the activation step completes successfully, the UP moves to ACTIVATION_STEP_COMPLETED state.</description>
        <value>4</value>
      </enumMember>
      <enumMember name="ACTIVATION_STEP_COMPLETED">
        <description>The previous activitation step completed successfully, but there are still more activation step(s) left.&#13;
&#13;
In this state, only the activate() or the cancel() action may be called.&#13;
If the cancel() action is called, the UP moves to DEACTIVATION_IN_PROGRESS state.&#13;
If the activate() action is called, the ME starts the activation of the next activation step and the UP moves to ACTIVATION_IN_PROGRESS state.&#13;
If the fallback timer expires in this state, the UP moves to DEACTIVATION_IN_PROGRESS state.</description>
        <value>5</value>
      </enumMember>
      <enumMember name="WAITING_FOR_COMMIT">
        <description>The last activation step completed successfully. &#13;
&#13;
The operator has to commit the upgrade.&#13;
In this state, only the commit() or the cancel() action may be called.&#13;
If the cancel() action is called, the UP moves to DEACTIVATION_IN_PROGRESS state.&#13;
If the commit() action is called, the UP moves to COMMIT_COMPLETED state.&#13;
</description>
        <value>6</value>
      </enumMember>
      <enumMember name="COMMIT_COMPLETED">
        <description>The upgrade is committed.&#13;
&#13;
The whole upgrad procedure has completed.</description>
        <value>7</value>
      </enumMember>
      <enumMember name="DEACTIVATION_IN_PROGRESS">
        <description>The deactivation of the UP is in progress.&#13;
&#13;
This may be a result of a cancel() action having been called or the fallback timer may have expired. In this state, no action can be called. In the end of fallback operation, the UP moves back to PREPARE_COMPLETED state.</description>
        <value>8</value>
      </enumMember>
    </enum>
    <derivedDataType name="EcimPasswordString">
      <description>This type enables secure handling of passwords.</description>
      <baseType>
        <string/>
      </baseType>
    </derivedDataType>
    <derivedDataType name="EcimEmpty">
      <description>Represents a leaf that has no value, it conveys information by its presence or absence.</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <baseType>
        <boolean/>
      </baseType>
    </derivedDataType>
    <derivedDataType name="DateTime">
      <description>Represents the international standard for the representation of date and time ( ISO 8601).&#13;
The string format is "YYYY-MM-DDThh:mm:ss.SSSZ" (excluding quotes).&#13;
A DateTime string consists of a date part, a time part, and an optional time zone information part. The time zone part may be a "Z", representing the Coordinated Universal Time (UTC) time zone (equals to +00) or a time zone offset (for example, +02:00).&#13;
If the time zone part is not present, the DateTime value represents local time.&#13;
&#13;
The following pattern describes the DateTime format:&#13;
YYYY-MM-DDThh:mm:ss[.S+][Z|+-hh:mm]&#13;
Where:&#13;
YYYY = Four digit year&#13;
MM = Two digit month (01=January, and so on)&#13;
DD = Two digit day of month (01 through 31)&#13;
T = Time designator (shows start of time component)&#13;
hh = Two digits of hour (00 through 23, AM/PM not allowed)&#13;
mm = Two digits of minute (00 through 59)&#13;
ss = Two digits of second (00 through 59, leap second not allowed)&#13;
S+ = One or more digits of decimal fraction of a second&#13;
Z = Time is UTC&#13;
+- = + or - character indicating positive or negative offset to UTC &#13;
&#13;
DateTime values are compliant with ISO 8601 "Representation of dates and times" but are restricted according to RFC 3339 "Date and Time on the Internet: Timestamps". The DateTime format is further restricted as follows:&#13;
- T and Z designators are upper case.&#13;
- . (dot) is used to indicate start of fractions of seconds (ISO 8601 also allows comma)&#13;
&#13;
</description>
      <domainExtension domain="ECIM">
        <extension name="originatingMimVersion" value="1"/>
        <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
        <extension name="originatingMimRelease" value="7"/>
      </domainExtension>
      <baseType>
        <string>
          <lengthRange>
            <min>19</min>
            <max>31</max>
          </lengthRange>
          <stringLength>
            <subrange>
              <min>19</min>
              <max>31</max>
            </subrange>
          </stringLength>
          <validValues>^([0-9]{4})-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([\.][0-9]+){0,1}(([\+|\-](0[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?)|(Z)?)$</validValues>
        </string>
      </baseType>
      <validationRules>
        <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^([0-9]{4})-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([\.][0-9]+){0,1}(([\+|\-](0[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?)|(Z)?)$]]></rule>
      </validationRules>
    </derivedDataType>
    <class name="SwM">
      <description>The root structural element of SW management activities.&#13;
 &#13;
&#13;
&#13;
</description>
      <systemCreated/>
      <root/>
      <action name="createUpgradePackageLocal">
        <description>Creates a new UpgradePackage MO representing an UP stored locally in the file system of the ME.&#13;
&#13;
Deprecated, replaced by the createUpgradePackage action.&#13;
&#13;
This action includes all activities to initialize the UP MO. After the UP MO is created, all descriptive information will be available: e.g. administrativeData, number/names of activation step(s) data. &#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.&#13;
This action can be invoked when there is no other action in progress on this MO. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="1"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
        <parameter name="directoryPathExtension">
          <description>Parameter is a relative file system path pointing to the directory where the UP content is located. The path is relative to the localFileStore attribute.</description>
          <in/>
          <dataType>
            <string/>
          </dataType>
        </parameter>
        <deprecated/>
      </action>
      <action name="createUpgradePackageRemote">
        <description>Creates a new UpgradePackage MO representing an UP stored remotely that is not stored on the ME.&#13;
&#13;
Deprecated, replaced by the createUpgradePackage action.&#13;
&#13;
This action includes all activities to initialize the UP MO. After the UP MO is created, all descriptive information will be available: e.g. administrativeData, number/names of activation step(s) data. &#13;
The location of the UP file is specified (by this action) input parameters: directoryPathExtension and remoteLocation.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.&#13;
This action can be invoked when there is no other action in progress on this MO. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="2"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
        <parameter name="directoryPathExtension">
          <description>This parameter is a relative file system path pointing to the directory where the UP content is located. The path is relative to the uriPathExtension in the TransferPolicyConsumer.</description>
          <in/>
          <dataType>
            <string/>
          </dataType>
        </parameter>
        <parameter name="remoteFileStore">
          <description>This TransferPolicyConsumer object contains a uriPathExtension attribute, which (together with Target and TargetGroup, all defined in the FileM fragment) define the exact remote location of the Upgrade Package.</description>
          <in/>
          <dataType>
            <moRef name="ManagedObject"/>
          </dataType>
        </parameter>
        <deprecated/>
      </action>
      <action name="cancel">
        <description>Stops the operation and restores the (consistent) state present before the long lasting operation was started.  &#13;
&#13;
Cancel can be invoked during any long lasting operation. &#13;
&#13;
The action returns immediately after invocation. The consequences of the action can be tracked via the progressReport attribute. The action returns false if the action is refused by the ME, returns true otherwise.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="3"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <action name="removeSwVersion">
        <description>Removes a SW version as completely as possible without disturbing node functionality. &#13;
&#13;
Files shared with other SW versions are not deleted.&#13;
The active SW version cannot be removed.&#13;
This action can only be invoked when there is no other action in progress on this MO. &#13;
&#13;
The action returns false if any of these conditions are violated. &#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="4"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
        <parameter name="swVersion">
          <description>The value component of the RDN of the SwVersionMain MO  to remove.&#13;
</description>
          <in/>
          <dataType>
            <moRef name="SwVersionMain">
              <mimName>CmwSwM</mimName>
            </moRef>
          </dataType>
        </parameter>
      </action>
      <action name="removeUpgradePackage">
        <description>Removes an UpgradePackage.&#13;
&#13;
This action removes the UpgradePackage MO specified as action parameter as well as all files temporarily stored in the ME and associated with the UP.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.&#13;
This action can be invoked when there is no other action in progress on this MO. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="5"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
        <parameter name="upgradePackage">
          <description>An UpgradePackage MO to be removed.  The DN of the UpgradePackage MO to be removed.</description>
          <in/>
          <dataType>
            <moRef name="UpgradePackage">
              <mimName>CmwSwM</mimName>
            </moRef>
          </dataType>
        </parameter>
      </action>
      <action name="createUpgradePackageFromUri">
        <description>Creates a new UpgradePackage MO representing an UP specified by a URI.&#13;
&#13;
Deprecated, replaced by the createUpgradePackage action.&#13;
&#13;
This action includes all activities to initialize the UP MO. After the UP MO is created, all descriptive information will be available: e.g. administrativeData, number/names of activation step(s) data. &#13;
&#13;
This action can be invoked when there is no other action in progress on this MO.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.&#13;
&#13;
The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
&#13;
The action also returns false if the ME cannot handle the URI (e.g., does not support the protocol specified in the URI).</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="6"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
        <parameter name="uri">
          <description>Contains a URI pointing to a directory containing the UP content.&#13;
&#13;
The generic URI syntax is defined by RFC 2396&#13;
&#13;
The URI must not contain any password. (The password shall be provided in the second parameter of this action.)&#13;
The URI may be local absolute (e.g., file:///data/dir/subdir), or remote (e.g., sftp://hostname/dir/subdir).&#13;
</description>
          <in/>
          <dataType>
            <string/>
          </dataType>
        </parameter>
        <parameter name="password">
          <description>A password to the server which provides UP.&#13;
&#13;
If there is no password, this parameter shall not be specified (i.e., NULL).</description>
          <in/>
          <dataType>
            <structRef name="EcimPassword">
              <mimName>CmwSwM</mimName>
            </structRef>
          </dataType>
        </parameter>
        <deprecated/>
      </action>
      <action name="createUpgradePackage">
        <description>Creates a new UpgradePackage MO representing an UP specified by a URI.&#13;
&#13;
This action includes all activities to initialize the UP MO. After the UP MO is created, all descriptive information will be available: e.g. administrativeData, number/names of activation step(s) data. &#13;
&#13;
This action can be invoked when there is no other action in progress on this MO.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute.&#13;
&#13;
The action returns 0 if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns the id of the action. The action id is different and unique for every invocation of the action.&#13;
&#13;
The action also returns 0 if the ME cannot handle the URI (e.g., does not support the protocol specified in the URI).&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="7"/>
        </domainExtension>
        <returnType>
          <uint16/>
        </returnType>
        <parameter name="uri">
          <description>Contains a URI pointing to a directory containing the UP content.&#13;
&#13;
The generic URI syntax is defined by RFC 2396&#13;
&#13;
The URI must not contain any password. (The password shall be provided in the second parameter of this action.)&#13;
The URI may be local absolute (e.g., file:///data/dir/subdir), or remote (e.g., sftp://hostname/dir/subdir).&#13;
</description>
          <in/>
          <dataType>
            <string/>
          </dataType>
        </parameter>
        <parameter name="password">
          <description>A password to the server which provides UP.&#13;
&#13;
If  authentication is not password based, this parameter will be ignored. </description>
          <in/>
          <dataType>
            <derivedDataTypeRef name="EcimPasswordString">
              <defaultValue>NULL</defaultValue>
              <mimName>CmwSwM</mimName>
            </derivedDataTypeRef>
          </dataType>
        </parameter>
      </action>
      <attribute name="reportProgress">
        <description>Represents the progress report (including result) of the ongoing action.&#13;
&#13;
This MO supports only one action to be executed at a time.&#13;
</description>
        <readOnly/>
        <dataType>
          <structRef name="AsyncActionProgress">
            <mimName>CmwSwM</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="fallbackTimer">
        <description>The maximum number of seconds allowed to elapse between the finish of an activation step and the start of the next action - a new activate() action - or commit() action.&#13;
&#13;
I.e., this attribute holds the value to which the attribute timeRemainingBeforeFallback is set after the action activate() is successfully completeted.&#13;
-1 symbolizes "infinity". In this case, the starting value of timeRemainingBeforeFallback shall also be set to -1 when the timer stars even though no counting down ever starts (it remains always -1).</description>
        <dataType>
          <int16>
            <defaultValue>1200</defaultValue>
          </int16>
        </dataType>
      </attribute>
      <attribute name="swMId">
        <description>The value component of the RDN.&#13;
</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="timeRemainingBeforeFallback">
        <description>Remaining number of seconds before performing fallback. &#13;
&#13;
The value -1 indicates infinite number of seconds.&#13;
Fallback means that the system returns to the state PREPARE_COMPLETED.</description>
        <noNotification/>
        <readOnly/>
        <dataType>
          <int16>
            <defaultValue>-1</defaultValue>
          </int16>
        </dataType>
      </attribute>
      <attribute name="localFileStorePath">
        <description>URI of the directory where the UPs are stored on the ME.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="activeSwVersion">
        <description>Reference to the active software version(s) actively controlling the behavior of the managed element.</description>
        <readOnly/>
        <dataType>
          <sequence>
            <moRef name="SwVersionMain">
              <mimName>CmwSwM</mimName>
            </moRef>
            <minLength>1</minLength>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="localFileStore">
        <description>Reference to a FileGroup MO (in the File Managment MOM Fragment) representing a directory in the local file system.&#13;
&#13;
Deprecated, superseded by the localFileStorePath attribute.&#13;
&#13;
The locally stored UPs are stored under this directory. If the ME does not support pull download of the UP, the MS has a separate procedure for downloading the files to a directory modeled as a FileGroup MO.&#13;
&#13;
If FileM MOM fragment is not implemented by the Managed Element, the localFileStore attribute is NULL.&#13;
If the ME supports pull download only, the localFileStore attribute is NULL.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <moRef name="ManagedObject"/>
        </dataType>
        <deprecated/>
      </attribute>
      <attribute name="userLabel">
        <description>Used for free-text description. </description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="timeoutFallbackCapability">
        <description>Indicates whether fallback capability is supported or not. &#13;
&#13;
If fallback capability is not supported, then setting SwM fallbackTimer has no effect and automatic fallback never happens.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <noNotification/>
        <readOnly/>
        <isNillable/>
        <dataType>
          <enumRef name="SwMTimeoutFallbackCapability">
            <defaultValue>SUPPORTED</defaultValue>
            <mimName>CmwSwM</mimName>
          </enumRef>
        </dataType>
      </attribute>
      <attribute name="subType">
        <description>subType is any string value identifying the type of node from a ECIM SwM perspective.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <noNotification/>
        <readOnly/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="alarmBeforeTimeout">
        <description>alarmBeforeTimeout  is the time in seconds an alarm is sent out before a fallback occurs.</description>
        <noNotification/>
        <dataType>
          <uint32>
            <defaultValue>180</defaultValue>
          </uint32>
        </dataType>
      </attribute>
      <attribute name="automaticRestore">
        <description>automaticRestore is set to true(1) if ECIM SwM shall automatically perform fallback operation at certain events otherwise set to  false(0).&#13;
&#13;
These events are the following:&#13;
•	The ME meets a critical problem.&#13;
	(The ME must be able to detect any kind of software problem that prohibits a successful activation (step).)&#13;
•	The user calls the cancel() action any time during the activation.&#13;
	o	Sub-case: Calling the cancel() action after the last activation step has completed (instead of calling commit()).&#13;
•	The fallback timer expires during the activation. &#13;
&#13;
The fallback operation shall restore the state that the ME had before starting the activation procedure.&#13;
&#13;
</description>
        <noNotification/>
        <dataType>
          <uint32>
            <defaultValue>1</defaultValue>
          </uint32>
        </dataType>
      </attribute>
      <attribute name="automaticBackup">
        <description>automaticBackup  is set to true(1) if ECIM SwM shall perform backup at activate() action otherwise set to  false(0).</description>
        <noNotification/>
        <dataType>
          <uint32>
            <defaultValue>1</defaultValue>
          </uint32>
        </dataType>
      </attribute>
    </class>
    <class name="UpgradePackage">
      <description>Describes the process of changing the software configuration of an ME and actions to control the change process.&#13;
&#13;
An instance of UpgradePackage (UP) represents a specific change of software configuration from the existing one to the new one identified by the attribute administrativeData. The execution of the change process described by UP class is the normal way to change the content of the SW inventory.&#13;
&#13;
An UP may be seen as a "modification agent": it can add new, remove, or modify functionality.&#13;
&#13;
When the upgrade package MO is created the upgrade control file is downloaded to specify the administrative data and the activation steps for this upgrade.&#13;
The sequence in which a Software upgrade executes is:&#13;
&#13;
1. Prepare&#13;
2. Verify (optional)&#13;
3. Activate &#13;
4. Commit </description>
      <systemCreated/>
      <action name="activate">
        <description>Current upgrade package is taken into operation fully or partially. &#13;
&#13;
Partial activation occurs if the UCF defines activation steps and the attribute ignoreBreakPoints is false. &#13;
The ME upgrade engine notifies the operator that the activation step is completed. The next activation step starts when the operator invokes an activate action. &#13;
Each UP has to have at least 1 activation step.&#13;
&#13;
When the attribute ignoreBreakPoints=true, all activation steps are executed in sequence, when an activation step is complete the ME executes the next activation step i.e. there is no operator invocation when an activation step is complete. &#13;
&#13;
The time for observation of the correct operation of the ME after each completed step is always monitored by a supervision timer.&#13;
The invocation of activate() may be monitored by a supervision timer.&#13;
If the supervision timer expires before invocation of activate() or commit(), then the activation fails and the ME falls back to the state PREPARE_COMPLETED.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
&#13;
This action can be invoked when the state is PREPARE_COMPLETED or ACTIVATION_STEP_COMPLETED. If the action is invoked in a state where the action has no meaning, ME is expected to return an error message.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="1"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <action name="commit">
        <description>Stops the activation supervision timer (fallback timer) and confirms the upgrade.&#13;
&#13;
The action returns when the action has completed (synchronous).&#13;
This action can be invoked when the state is WAITING_FOR_COMMIT. The action returns true on success, false on failure.</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="2"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <action name="cancel">
        <description>Stops the operation and restores the (consistent) state present before the long lasting operation was started.  &#13;
&#13;
Cancel can be invoked during any long lasting operation. Furthermore, cancel() can also be invoked when the UP is in WAITING_FOR_COMMIT or ACTIVATION_STEP_COMPLETED state (without having a long lasting operation in progress). Calling cancel(), in this state, orders the ME to restore the state present before the activation procedure was started (PREPARE_COMPLETED).&#13;
&#13;
The action returns immediately after invocation. The consequences of the action can be tracked via the progressReport attribute. The action returns false if the action is refused by the ME, returns true otherwise.&#13;
&#13;
This action can be invoked when the UP state is PREPARE_IN_PROGRESS, VERIFICATION_IN_PROGRESS, ACTIVATION_IN_PROGRESS, ACTIVATION_STEP_COMPLETED, or WAITING_FOR_COMMIT. If the action is invoked in a state where the action has no meaning, the ME is expected to return false.&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="3"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <action name="verify">
        <description>Verifies the ability to activate current upgrade package.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
&#13;
This action can be invoked when the state is PREPARE_COMPLETED. If the action is invoked in a state where the action has no meaning, ME is expected to return an error message.&#13;
Calling this action is optional in the whole upgrade procedure. The action can be called more than once if wished.&#13;
&#13;
&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="4"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <action name="prepare">
        <description>Prepares the Managed Element for the activation of current upgrade package. &#13;
&#13;
Executing prepare() does not have any negative impact on the in service performance of Managed Element.&#13;
&#13;
The action returns immediately after invocation. The progress of the action can be tracked via the progressReport attribute. The action returns false if the action could not start for any reason (e.g., another parallel action is in progress), otherwise returns true.&#13;
&#13;
&#13;
</description>
        <domainExtension domain="CoreMW">
          <extension name="admOpId" value="5"/>
        </domainExtension>
        <returnType>
          <boolean/>
        </returnType>
      </action>
      <attribute name="state">
        <description>Current state of Upgrade Package.</description>
        <readOnly/>
        <dataType>
          <enumRef name="UpgradePackageState">
            <mimName>CmwSwM</mimName>
          </enumRef>
        </dataType>
      </attribute>
      <attribute name="reportProgress">
        <description>Represents the progress report (including result) of the ongoing action.&#13;
&#13;
This MO supports only one action to be executed at a time.&#13;
</description>
        <readOnly/>
        <dataType>
          <structRef name="AsyncActionProgressWithSteps">
            <mimName>CmwSwM</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="upgradePackageId">
        <description>The value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="ignoreBreakPoints">
        <description>Influences the behaviour of the activate() action.&#13;
&#13;
false =&gt; There is a breakpoint between each activation step. Activation process stops at each breakpoint. &#13;
true =&gt; Execution shall ignore breakpoints between activation steps and instead execute the end to end activation process invoking all activation steps in sequence (assuming no errors occur).</description>
        <dataType>
          <boolean>
            <defaultValue>true</defaultValue>
          </boolean>
        </dataType>
      </attribute>
      <attribute name="userLabel">
        <description>Used for free-text description. </description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="administrativeData">
        <description>The product identification of the software version(s) being activated at successful completion of the full sequence of actions for an upgrade. &#13;
&#13;
If the resulting software version after activation is unknown or uncertain, the administrativeData could be empty.&#13;
</description>
        <readOnly/>
        <dataType>
          <sequence>
            <structRef name="ProductData">
              <mimName>CmwSwM</mimName>
            </structRef>
            <minLength>1</minLength>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="activationStep">
        <description>List of activation steps the activation procedure consists of.&#13;
&#13;
 It is possible to stop after each step, perform supervision and continue with the procedure.&#13;
The upgrade procedure consists of at least one activation step.</description>
        <readOnly/>
        <dataType>
          <sequence>
            <structRef name="ActivationStep">
              <mimName>CmwSwM</mimName>
            </structRef>
            <minLength>1</minLength>
          </sequence>
        </dataType>
      </attribute>
      <attribute name="created">
        <description>Date and time  this Upgrade Package instance was created.&#13;
</description>
        <readOnly/>
        <dataType>
          <derivedDataTypeRef name="DateTime">
            <mimName>CmwSwM</mimName>
          </derivedDataTypeRef>
        </dataType>
      </attribute>
      <attribute name="directoryPathExtension">
        <description>DEPRECATED&#13;
Relative path to the directory containing the Upgrade Package.&#13;
&#13;
It reflects the input given when creating this UP.&#13;
If the UP is stored locally, this path extension is relative to the localFileStore FileGroup MO (or LocalFileStorePath).&#13;
If the UP is stored remotely, this path extension is concatenated to the uriPathExtension in the TransferPolicyProducer.&#13;
&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <string/>
        </dataType>
        <deprecated/>
      </attribute>
      <attribute name="remoteFileStore">
        <description>DEPRECATED&#13;
If the upgrade package is stored remotely, this attribute contains a reference to a TransferPolicyConsumer object.&#13;
&#13;
This attribute indicates the relative location of the UP and reflects the input given when creating this UP.&#13;
&#13;
&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <moRef name="ManagedObject"/>
        </dataType>
        <deprecated/>
      </attribute>
      <attribute name="isLocallyStored">
        <description>DEPRECATED&#13;
Shows if upgrade package is stored on the node.&#13;
&#13;
If true the upgrade package is stored in the local file system of the managed element.&#13;
If false the upgrade package is stored in a remote file system (remote file server).</description>
        <readOnly/>
        <dataType>
          <boolean/>
        </dataType>
        <deprecated/>
      </attribute>
      <attribute name="uri">
        <description>A URI pointing to the directory where the UP can be found.&#13;
&#13;
The URI may be local (e.g., file://data/dir/subdir) or a remote (e.g., ftp://hostname/dir/subdir).</description>
        <readOnly/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="creatorActionId">
        <description>The Id (actionId) of the action that have created this UpgradePackage managed object.&#13;
&#13;
The default 0 value denotes that the managed element does not record this information.</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <noNotification/>
        <readOnly/>
        <isNillable/>
        <dataType>
          <uint16>
            <defaultValue>0</defaultValue>
          </uint16>
        </dataType>
      </attribute>
      <attribute name="activationFallbackTimer">
        <description>The activationFallbackTimer is the maximum execution time of an activation operation.&#13;
The activationFallbackTimer is fetched from the packageInfo.xml.&#13;
&#13;
The default -1 value denotes that the activation timer is disabled.</description>
        <noNotification/>
        <readOnly/>
        <dataType>
          <int32>
            <defaultValue>-1</defaultValue>
          </int32>
        </dataType>
      </attribute>
    </class>
    <class name="SwVersionMain">
      <description>This class is used to represent the main SW version running on the ME. &#13;
&#13;
Such MO may be created after activating an UP.&#13;
&#13;
An active software version is actively controlling the behaviour of the ME, while a non-active version represents software not yet activated or software which has been de-activated during some previous activation. There may be one or more active software versions.&#13;
&#13;
This class is similar to the SwVersion class in the SW Inventory Fragment. Both SW Inventory SwVersion MOC and SwM SwVersionMain MOC represent overall software version of the ME. &#13;
&#13;
&#13;
&#13;
&#13;
 &#13;
</description>
      <systemCreated/>
      <attribute name="swVersionMainId">
        <description>The value component of the RDN.</description>
        <mandatory/>
        <noNotification/>
        <restricted/>
        <key/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="administrativeData">
        <description>The product identification of the software version. &#13;
</description>
        <readOnly/>
        <dataType>
          <structRef name="ProductData">
            <mimName>CmwSwM</mimName>
          </structRef>
        </dataType>
      </attribute>
      <attribute name="name">
        <description>Everyday name of the SW version. &#13;
&#13;
It may contain any longer textual description.</description>
        <readOnly/>
        <dataType>
          <string/>
        </dataType>
      </attribute>
      <attribute name="size">
        <description>Amount of disk space in KB that will be freed if this SW version is deleted.&#13;
&#13;
This figure may thus vary depending on what other SW versions exist - files shared between two SW versions will only be deleted when the last of those SW versions is deleted.&#13;
&#13;
</description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <int64/>
        </dataType>
      </attribute>
      <attribute name="swVersion">
        <description>Associated Software Inventory Management MO.&#13;
&#13;
Both SW Inventory SwVersion MOC and SwM SwVersionMain MOC represent overall software version of the ME. </description>
        <domainExtension domain="ECIM">
          <extension name="isNillable" value="true"/>
        </domainExtension>
        <readOnly/>
        <isNillable/>
        <dataType>
          <moRef name="ManagedObject"/>
        </dataType>
      </attribute>
    </class>
    <relationship name="SwM_to_UpgradePackage">
      <containment>
        <parent>
          <hasClass name="SwM">
            <mimName>CmwSwM</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="UpgradePackage">
            <mimName>CmwSwM</mimName>
          </hasClass>
          <cardinality>
            <min>0</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="false"/>
          <extension name="canDelete" value="false"/>
        </domainExtension>
        <notCreatable/>
        <notDeleteable/>
      </containment>
    </relationship>
    <relationship name="SwM_to_SwVersionMain">
      <containment>
        <parent>
          <hasClass name="SwM">
            <mimName>CmwSwM</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="SwVersionMain">
            <mimName>CmwSwM</mimName>
          </hasClass>
          <cardinality>
            <min>1</min>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="false"/>
          <extension name="canDelete" value="false"/>
        </domainExtension>
        <notCreatable/>
        <notDeleteable/>
      </containment>
    </relationship>
  </mim>
  <interMim>
    <relationship name="SystemFunctions_to_SwM">
      <domainExtension domain="CoreMW">
        <extension name="splitImmDn" value="true"/>
      </domainExtension>
      <containment>
        <parent>
          <hasClass name="SystemFunctions">
            <mimName>ECIM_Top</mimName>
          </hasClass>
        </parent>
        <child>
          <hasClass name="SwM">
            <mimName>CmwSwM</mimName>
          </hasClass>
          <cardinality>
            <min>1</min>
            <max>1</max>
          </cardinality>
        </child>
        <domainExtension domain="ECIM">
          <extension name="canCreate" value="false"/>
          <extension name="canDelete" value="false"/>
        </domainExtension>
        <notCreatable/>
        <notDeleteable/>
      </containment>
    </relationship>
  </interMim>
</models>
